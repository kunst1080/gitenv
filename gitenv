#!/usr/bin/env bash

set -eu

config=""
config_dir=""

if [ -v GITENV ] ; then
  ROOT=$GITENV
else
  ROOT=~/.gitenv
fi

CONFIG_FILE=$ROOT/config

main() {
  local command

  if [[ "$#" -eq 0 ]] ; then
      command="--show"
  fi
  if [[ "$#" -ge 1 ]] ; then
      command=$1
  fi
  if [[ "$#" -ge 2 ]] ; then
      config=$2
      config_dir=$ROOT/$config
  fi
  
  case "$command" in
    -s | --show   ) _show ;;
    -l | --list   ) _list ;;
    -c | --change ) _change ;;
         --rm     ) _rm ;;
    * ) _help ;;
  esac
}

_help() {
cat <<++EOS
NAME:
  gitenv - A .gitconfig switcher.

OPTIONS:
  -s, --show (default)
    Display the current config.
  -l, --list
    List configs.
  -c, --config CONFIG_NAME
    Create a config and change to the config.
  --rm CONFIG_NAME
    Remove the config.
  -h, --help
    Display this help.
++EOS
}

_show() {
  if [[ ! -e $CONFIG_FILE ]] ; then
    echo "There are no configs."
    echo
    _help
    exit 9
  fi
  __show_current_config " ($(git config --get user.name))"
}

_list() {
  cd $ROOT
  ls -1 | fgrep -v config
}

_change() {
  echo "swich to $config"
  cd $HOME
  __unlink .gitconfig
  mkdir -p $config_dir
  __link $config_dir/.gitconfig
  echo $config > $CONFIG_FILE
  _show
}

_rm() {
  if [[ "$config" = "" ]] ; then
    _help
    exit 9
  fi
  if [[ "$config" = "$(__show_current_config)" ]] ; then
    cd $HOME
    __unlink .gitconfig
  fi
  rm -fRv $config_dir
}

__show_current_config() {
  echo "$(cat $CONFIG_FILE)$*"
}

__link() {
  touch $1
  ln -s $1
}

__unlink() {
  if [[ ! -e "$1" ]] ; then
    return
  fi
  if [[ ! -L "$1" ]] ; then
    echo $1 is not managed under gitenv.
    exit 9
  fi
  if echo "$(readlink $1)" | grep -sv "$ROOT" ; then
    echo $1 is not managed under gitenv.
    exit 9
  fi
  unlink $1
}

main $*
